Problem Statement :
Given a string s of length n, find the longest repeating non-overlapping substring in it. 
In other words find 2 identical substrings of maximum length which do not overlap. Return the longest non-overlapping substring. Return "-1" if no such string exists.

Note: Multiple Answers are possible but you have to return the substring whose first occurrence is earlier.

For Example: "abhihiab", here both "ab" and "hi" are possible answers. 
But you will have to return "ab" because it's first occurrence appears before the first occurrence of "hi".

Solution Code :
class Solution {
    static String longestSubstring(String s, int n) {
        String resultedString = "";
        StringBuilder str = new StringBuilder(s);
        boolean flag = false;
        for(int i=0;i<n;i++){
            String temp = "" + str.charAt(i);
            for(int j=i;j<n;j++){
                
                if(str.indexOf(temp,j+1) != -1){
                    if(resultedString.length() < temp.length()){
                        resultedString = temp;
                        
                    }
                }else{
                    flag = true;
                }
                
                if(j+1 != n){
                    temp = temp+ str.charAt(j+1);
                }
                
                if(flag == true){
                    j=n;
                    flag = false;
                }
            }
        }
        if(resultedString ==""){
            resultedString = "-1";
        }
        return resultedString;
    }
};
