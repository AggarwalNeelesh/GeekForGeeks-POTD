Problem Statement :
 Given a binary tree having n nodes. Find the sum of all nodes on the longest path from root to any leaf node. 
If two or more paths compete for the longest path, then the path having maximum sum of nodes will be considered.

Solution Code :
class Solution{
    public int sumOfLongRootToLeafPath(Node root)
    {
        //code here
        int a[] = recur(root);
        return a[1];
    }
    private static int[] recur(Node root){
        if(root==null)return new int[]{0, 0};
        if(root.left==null && root.right==null)
            return new int[]{0, root.data};
        int l[] = recur(root.left);
        int r[] = recur(root.right);
        if(l[0]>r[0]){ // Height of left child > right child
            l[0]++;
            l[1] += root.data;
            return l;
        }else if(l[0]==r[0]){ 
            l[0]++;
            l[1] = Math.max(l[1], r[1]) + root.data;
            return l;
        }else{ // Height of left child < right child
            r[0]++;
            r[1] += root.data;
            return r;
        }
    }
}
