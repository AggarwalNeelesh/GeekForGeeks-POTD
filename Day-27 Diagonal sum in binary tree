Problem Statement :
Consider Red lines of slope -1 passing between nodes (in following diagram). The diagonal sum in a binary tree is the sum of all node datas lying between these lines. Given a Binary Tree of size n, print all diagonal sums.

For the following input tree, output should be 9, 19, 42.
9 is sum of 1, 3 and 5.
19 is sum of 2, 6, 4 and 7.
42 is sum of 9, 10, 11 and 12.

Solution Code : 
class Tree {
    public static ArrayList <Integer> diagonalSum(Node root) 
    {
        // code here.
        ArrayList <Integer> ans = new ArrayList <Integer>();
        Queue<Node> q = new LinkedList<>();
        addRight(q, root);
        while(q.size()>0){
            int n = q.size();
            int sum = 0;
            while(n-->0){
                Node x = q.remove(); // Remove 
                sum += x.data;       // Work : Add Node value to Sum
                if(x.left!=null){
                    addRight(q, x.left);  // Add child (All rightside Nodes)
                }
            }
            ans.add(sum);
        }
        return ans;
    }
    private static void addRight(Queue<Node> q, Node root){
        while(root!=null){
            q.add(root);
            root = root.right;
        }
    }
}
