Problem Statement:
Given a matrix mat[][] with r rows and c columns, where some cells are landmines (marked as 0) and others are safe to traverse. 
Your task is to find the shortest safe route from any cell in the leftmost column to any cell in the rightmost column of the mat. 
You cannot move diagonally, and you must avoid both the landmines and their adjacent cells (up, down, left, right), as they are also unsafe.

Solution Code :
class Solution {
    public static int findShortestPath(int[][] mat) {
        // code here
        
        // All in-accessible cells are marked -1.
        for(int i=0;i<mat.length;i++)
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==0){
                    mat[i][j] = -1;
                    if(i-1>=0 && mat[i-1][j]==1)mat[i-1][j] = -1;
                    if(j-1>=0 && mat[i][j-1]==1)mat[i][j-1] = -1;
                    if(i+1<mat.length && mat[i+1][j]==1)mat[i+1][j] = -1;
                    if(j+1<mat[0].length && mat[i][j+1]==1)mat[i][j+1] = -1;
                }
            }
        // Traversing in reverse from second last coloumn to first coloumn
        for(int j=mat[0].length-2;j>=0;j--){
            // Getting shortest path from cell on right side
            for(int i=0;i<mat.length;i++){
                if(mat[i][j]==-1)continue;
                if(mat[i][j+1]==-1 || mat[i][j+1]==0)mat[i][j] = 0;
                else mat[i][j] = mat[i][j+1]+1;
            }
            // Getting shortest path from cell above/below in downward traversal
            for(int i=0;i<mat.length;i++){
                if(mat[i][j]==-1)continue;
                if(i-1>=0 && mat[i-1][j]>0 && (mat[i][j] ==0 || mat[i][j] > mat[i-1][j]+1))mat[i][j] = mat[i-1][j]+1;
                if(i+1<mat.length&& mat[i+1][j]>0 && (mat[i][j] ==0 || mat[i][j] > mat[i+1][j]+1))mat[i][j] = mat[i+1][j]+1;
            }
            // Getting shortest path from cell above/below in upward traversal
            for(int i=mat.length-1;i>=0;i--){
                if(mat[i][j]==-1)continue;
                if(i-1>=0 && mat[i-1][j]>0 && (mat[i][j] ==0 || mat[i][j] > mat[i-1][j]+1))mat[i][j] = mat[i-1][j]+1;
                if(i+1<mat.length&& mat[i+1][j]>0 && (mat[i][j] ==0 || mat[i][j] > mat[i+1][j]+1))mat[i][j] = mat[i+1][j]+1;
            }
        }
        
        // Finding minimum path length from first column cells
        int min = Integer.MAX_VALUE;
        for(int a[] : mat){
            if(a[0]>0)min = Math.min(a[0], min);
        }
        if(min==0 || min==Integer.MAX_VALUE)
            min=-1;
        return min;
    }
}
