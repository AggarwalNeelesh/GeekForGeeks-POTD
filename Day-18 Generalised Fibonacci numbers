Problem Statement :
Consider the generalized Fibonacci number g, which is dependent on a, b and c as follows :-
g(1) = 1, g(2) = 1. For any other number n, g(n) = a*g(n-1) + b*g(n-2) + c.

For a given value of m, determine g(n)%m.

Solution Code :
class Solution {
    static long genFibNum(Long a, Long b, Long c, long n, long m) {
        // code here
         if (n <= 2) {
            return 1 % m;
        }
        long[][] factor = {
                {a, b, 1},
                {1, 0, 0},
                {0, 0, 1}
        };
        long[][] result = {
                {1, 0, 0},
                {0, 1, 0},
                {0, 0, 1}
        };
        n -= 2;
        while (n > 0) {
            if ((n & 1) == 1) {
                result = multiply(result, factor, m);
            }
            factor = multiply(factor, factor, m);
            n >>= 1;
        }
        return (result[0][0] + result[0][1] + c * result[0][2]) % m;
    }
    static long[][] multiply(long[][] A, long[][] B, long m) {
        int size = A.length;
        long[][] result = new long[size][size];
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                long sum = 0;
                for (int k = 0; k < size; ++k) {
                    sum += A[i][k] * B[k][j];
                    sum %= m;
                }
                result[i][j] = sum;
            }
        }
        return result;
    
    }
};
